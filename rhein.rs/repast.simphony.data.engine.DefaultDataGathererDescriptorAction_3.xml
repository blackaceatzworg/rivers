<repast.simphony.data.engine.DefaultDataGathererDescriptor>
  <dataSetId class="string">segments</dataSetId>
  <scheduleParameters>
    <start>1.0</start>
    <interval>1.0</interval>
    <priority>-Infinity</priority>
    <duration>-1.0</duration>
    <frequency>REPEAT</frequency>
  </scheduleParameters>
  <dataMappingContainer class="repast.simphony.data.logging.gather.DefaultDataMappingContainer">
    <nameMappingTable>
      <entry>
        <string>Overflow</string>
        <repast.simphony.data.logging.gather.MethodMapping>
          <method>
            <class>rhein.Segment</class>
            <name>getOverflow</name>
            <parameter-types/>
          </method>
        </repast.simphony.data.logging.gather.MethodMapping>
      </entry>
      <entry>
        <string>Freeboard</string>
        <repast.simphony.data.logging.gather.MethodMapping>
          <method>
            <class>rhein.Segment</class>
            <name>getFreeboard</name>
            <parameter-types/>
          </method>
        </repast.simphony.data.logging.gather.MethodMapping>
      </entry>
      <entry>
        <string>Retained</string>
        <repast.simphony.data.logging.gather.MethodMapping>
          <method>
            <class>rhein.Segment</class>
            <name>getRetained</name>
            <parameter-types/>
          </method>
        </repast.simphony.data.logging.gather.MethodMapping>
      </entry>
      <entry>
        <string>raisedDike</string>
        <repast.simphony.data.logging.BSFMapping>
          <bsfExpression>value = agent.getLastBuiltClassName().equals(&quot;RaiseDike&quot;) ? 1 : 0;</bsfExpression>
          <bsfLanguage>beanshell</bsfLanguage>
        </repast.simphony.data.logging.BSFMapping>
      </entry>
      <entry>
        <string>addedRetentionBasin</string>
        <repast.simphony.data.logging.BSFMapping>
          <bsfExpression>value = agent.getLastBuiltClassName().equals(&quot;AddRetentionBasin&quot;) ? 1 : 0;</bsfExpression>
          <bsfLanguage>beanshell</bsfLanguage>
        </repast.simphony.data.logging.BSFMapping>
      </entry>
      <entry>
        <string>Run Number</string>
        <repast.simphony.data.logging.gather.RunNumberMapping>
          <runNumber>1</runNumber>
        </repast.simphony.data.logging.gather.RunNumberMapping>
      </entry>
      <entry>
        <string>Discharge</string>
        <repast.simphony.data.logging.gather.MethodMapping>
          <method>
            <class>rhein.AbstractSegment</class>
            <name>getDischarge</name>
            <parameter-types/>
          </method>
        </repast.simphony.data.logging.gather.MethodMapping>
      </entry>
      <entry>
        <string>Name</string>
        <repast.simphony.data.logging.gather.MethodMapping>
          <method>
            <class>rhein.AbstractSegment</class>
            <name>getName</name>
            <parameter-types/>
          </method>
        </repast.simphony.data.logging.gather.MethodMapping>
      </entry>
      <entry>
        <string>protectionCapacity</string>
        <repast.simphony.data.logging.BSFMapping>
          <bsfExpression>value = agent.getRetainable() + agent.getDikeCapacity();</bsfExpression>
          <bsfLanguage>beanshell</bsfLanguage>
        </repast.simphony.data.logging.BSFMapping>
      </entry>
      <entry>
        <string>Threatened</string>
        <repast.simphony.data.logging.gather.MethodMapping>
          <method>
            <class>rhein.Segment</class>
            <name>isThreatened</name>
            <parameter-types/>
          </method>
        </repast.simphony.data.logging.gather.MethodMapping>
      </entry>
      <entry>
        <string>IntThreatened</string>
        <repast.simphony.data.logging.BSFMapping>
          <bsfExpression>value = agent.isThreatened() ? 1 : 0;</bsfExpression>
          <bsfLanguage>beanshell</bsfLanguage>
        </repast.simphony.data.logging.BSFMapping>
      </entry>
      <entry>
        <string>Tick</string>
        <repast.simphony.data.logging.gather.DefaultTimeDataMapping/>
      </entry>
      <entry>
        <string>Inflow</string>
        <repast.simphony.data.logging.gather.MethodMapping>
          <method>
            <class>rhein.Segment</class>
            <name>getInflow</name>
            <parameter-types/>
          </method>
        </repast.simphony.data.logging.gather.MethodMapping>
      </entry>
    </nameMappingTable>
    <mappingNameTable>
      <entry>
        <repast.simphony.data.logging.gather.MethodMapping reference="../../../nameMappingTable/entry/repast.simphony.data.logging.gather.MethodMapping"/>
        <string>Overflow</string>
      </entry>
      <entry>
        <repast.simphony.data.logging.gather.MethodMapping reference="../../../nameMappingTable/entry[13]/repast.simphony.data.logging.gather.MethodMapping"/>
        <string>Inflow</string>
      </entry>
      <entry>
        <repast.simphony.data.logging.gather.MethodMapping reference="../../../nameMappingTable/entry[8]/repast.simphony.data.logging.gather.MethodMapping"/>
        <string>Name</string>
      </entry>
      <entry>
        <repast.simphony.data.logging.BSFMapping reference="../../../nameMappingTable/entry[9]/repast.simphony.data.logging.BSFMapping"/>
        <string>protectionCapacity</string>
      </entry>
      <entry>
        <repast.simphony.data.logging.BSFMapping reference="../../../nameMappingTable/entry[11]/repast.simphony.data.logging.BSFMapping"/>
        <string>IntThreatened</string>
      </entry>
      <entry>
        <repast.simphony.data.logging.BSFMapping reference="../../../nameMappingTable/entry[4]/repast.simphony.data.logging.BSFMapping"/>
        <string>raisedDike</string>
      </entry>
      <entry>
        <repast.simphony.data.logging.BSFMapping reference="../../../nameMappingTable/entry[5]/repast.simphony.data.logging.BSFMapping"/>
        <string>addedRetentionBasin</string>
      </entry>
      <entry>
        <repast.simphony.data.logging.gather.RunNumberMapping reference="../../../nameMappingTable/entry[6]/repast.simphony.data.logging.gather.RunNumberMapping"/>
        <string>Run Number</string>
      </entry>
      <entry>
        <repast.simphony.data.logging.gather.DefaultTimeDataMapping reference="../../../nameMappingTable/entry[12]/repast.simphony.data.logging.gather.DefaultTimeDataMapping"/>
        <string>Tick</string>
      </entry>
      <entry>
        <repast.simphony.data.logging.gather.MethodMapping reference="../../../nameMappingTable/entry[10]/repast.simphony.data.logging.gather.MethodMapping"/>
        <string>Threatened</string>
      </entry>
      <entry>
        <repast.simphony.data.logging.gather.MethodMapping reference="../../../nameMappingTable/entry[3]/repast.simphony.data.logging.gather.MethodMapping"/>
        <string>Retained</string>
      </entry>
      <entry>
        <repast.simphony.data.logging.gather.MethodMapping reference="../../../nameMappingTable/entry[2]/repast.simphony.data.logging.gather.MethodMapping"/>
        <string>Freeboard</string>
      </entry>
      <entry>
        <repast.simphony.data.logging.gather.MethodMapping reference="../../../nameMappingTable/entry[7]/repast.simphony.data.logging.gather.MethodMapping"/>
        <string>Discharge</string>
      </entry>
    </mappingNameTable>
  </dataMappingContainer>
  <aggregateContainer class="repast.simphony.data.logging.gather.DefaultAggregateDataMappingContainer">
    <nameMappingTable/>
    <mappingNameTable/>
    <alternatedNameTable/>
    <nameAlternatedTable/>
  </aggregateContainer>
  <agentClass>rhein.Segment</agentClass>
  <name>Segments</name>
</repast.simphony.data.engine.DefaultDataGathererDescriptor>